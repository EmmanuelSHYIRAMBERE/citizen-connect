generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  interests     String[]
  role          Role      @default(CITIZEN)

  nationalId              String? @unique // For Rwanda context
  address                 String?
  position                String? // For agency staff
  preferredLanguage       String?
  notificationPreferences Json? // e.g., { "email": true, "sms": false }

  isVerified Boolean?
  isActive   Boolean?
  lastLogin  DateTime @updatedAt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  complaints    Complaint[]
  department    Department[]
  notifications Notification[] @relation("UserNotifications")
}

enum Role {
  CITIZEN
  AGENCY
  ADMIN
}

model Complaint {
  id                        String    @id @default(auto()) @map("_id") @db.ObjectId
  reference                 String?   @unique
  title                     String
  description               String
  category                  String
  subCategory               String?
  tags                      String[]
  status                    String    @default("submitted")
  priority                  String?   @default("medium")
  isAnonymous               Boolean?  @default(false)
  isPublic                  Boolean?  @default(true)
  departmentId              String?   @db.ObjectId
  agencyId                  String?   @db.ObjectId
  assignedToId              String?   @db.ObjectId
  citizenId                 String?   @db.ObjectId
  citizenName               String?
  citizenContact            String?
  contactPreference         String?   @default("email")
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  dueDate                   DateTime?
  resolvedAt                DateTime?
  location                  Json?
  viewCount                 Int?      @default(0)
  upvoteCount               Int?      @default(0)
  similarComplaintsCount    Int?
  resolutionSummary         String?
  citizenSatisfactionRating Int?
  feedbackComment           String?
  aiCategoryConfidence      Float?
  internalNotes             String?
  escalationReason          String?

  // Relations
  timeline    Timeline[]
  // department            Department        @relation(fields: [departmentId], references: [id])
  // agency                Agency?           @relation(fields: [agencyId], references: [id])
  assignedTo  User?        @relation(fields: [assignedToId], references: [id])
  // citizen               User              @relation("citizenComplaints", fields: [citizenId], references: [id])
  attachments Attachment[]
  // updates               ComplaintUpdate[]

  @@index([citizenId])
  @@index([departmentId])
  @@index([category])
  @@index([status])
  @@index([createdAt])
}

enum ComplaintStatus {
  SUBMITTED
  IN_REVIEW
  IN_PROGRESS
  RESOLVED
  REJECTED
}

model Attachment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  name        String
  type        String
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  complaintId String    @db.ObjectId
  createdAt   DateTime  @default(now())
}

model Timeline {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  status      ComplaintStatus
  description String
  complaint   Complaint       @relation(fields: [complaintId], references: [id])
  complaintId String          @db.ObjectId
  createdAt   DateTime        @default(now())
}

model Notification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  userId      String           @db.ObjectId
  user        User             @relation("UserNotifications", fields: [userId], references: [id])
  type        NotificationType
  title       String
  message     String
  image       String?
  isRead      Boolean          @default(false)
  referenceId String?          @db.ObjectId
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum NotificationType {
  COMPLAINT_SUBMITTED
  COMPLAINT_UPDATED
  COMPLAINT_RESOLVED
  MESSAGE_RECEIVED
  SYSTEM_NOTIFICATION
}

model Department {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String
  email       String
  phone       String
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
